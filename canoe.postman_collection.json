{
	"info": {
		"_postman_id": "a00c1130-32b4-4f27-b64b-b0954efbddd1",
		"name": "Canoe",
		"description": "# ðŸš€ Welcome to Canoe team\n\n## Postman Overview\n\nPostman is a powerful tool for testing APIs, and I created a Postman collection for this project to help you easily test all available API endpoints.\n\n### How to Use the Postman Collection:\n\n1. **Download the Collection**:  \n    Go to git repository and download the postman json collection\n    \n2. **Import the Collection**:  \n    Open Postman, click on the \"Import\" button, and select the downloaded `.json` file.\n    \n3. **Set Up Environment Variables**:  \n    After importing, set the `canoe_base_url` environment variable to `http://localhost:8000` (or your desired environment URL).\n    \n4. **Run API Requests**:  \n    Use the pre-configured requests in the collection to easily interact with the API, test different endpoints, and see responses in real time.\n    \n\nMake sure to add the header `Accept: application/json` to ensure all responses are returned in JSON format.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20019413"
	},
	"item": [
		{
			"name": "Funds",
			"item": [
				{
					"name": "Get all Funds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    //\"start_year\": 1992\n    //\"fund_manager\": 6\n    //\"name\": \"VonRueden\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{canoe_base_url}}/api/v1/funds",
							"host": [
								"{{canoe_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"funds"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Create Fund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Global Equity Fund\",\n  \"start_year\": 2022,\n  \"fund_manager_id\": 1,\n  \"aliases\": [\"GEF\", \"Global Fund\"],\n  \"companies\": [1,2]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{canoe_base_url}}/api/v1/funds",
							"host": [
								"{{canoe_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"funds"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update fund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Global Equity Fund\",\n  \"start_year\": 2023,\n  \"fund_manager_id\": 1,\n  \"aliases\": [\"GEF\", \"Global Fund\"],\n  \"companies\": [5,3]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{canoe_base_url}}/api/v1/funds/1",
							"host": [
								"{{canoe_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"funds",
								"1"
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{canoe_base_url}}/api/v1/funds/3",
							"host": [
								"{{canoe_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"funds",
								"3"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Get Fund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful GET request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{canoe_base_url}}/api/v1/funds/1",
							"host": [
								"{{canoe_base_url}}"
							],
							"path": [
								"api",
								"v1",
								"funds",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}